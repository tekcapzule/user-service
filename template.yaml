AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: User-Service-Deployment-Descriptor

Parameters:
  Stage:
    Type: String
    Description: Stage name to deploy resources to
    AllowedValues:
      - dev
      - prod

Globals:
  Function:
    Runtime: java11
    MemorySize: 1024
    Timeout: 20
    AutoPublishAlias: !Ref Stage
    Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker
    CodeUri: ./application
    Tags:
      Stage: !Ref Stage
      Service: User
      Resource: Lambda
    Environment:
      Variables:
        TABLE: !Ref UserTable
        APPLICATION_ENVIRONMENT: !Ref Stage
        CLOUD_REGION: US_West_2
        MAIN_CLASS: com.tekcapsule.user.application.UserApplication
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1

Resources:

  # Setup API Gateway

  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "user-${Stage}"
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'X-Forwarded-For, Content-Type, Authorization, X-User-Login, X-Channel-Code'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      Variables:
        LAMBDA_ALIAS: !Ref Stage

  # Setup DynamoDB Table

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Stage}User"
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # Setup Lambda Functions

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-User-CreateUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: createFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: user/create
            Method: post
            RestApiId:
              Ref: UserApi

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-User-UpdateUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: updateFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: user/update
            Method: post
            RestApiId:
              Ref: UserApi

  DisableUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-User-DisableUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: disableFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: user/disable
            Method: post
            RestApiId:
              Ref: UserApi
  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-User-GetUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: user/get
            Method: post
            RestApiId:
              Ref: UserApi

  FollowUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-User-FollowUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: followFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: user/follow
            Method: post
            RestApiId:
              Ref: UserApi

  UnfollowUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-User-UnfollowUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: unfollowFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: user/unfollow
            Method: post
            RestApiId:
              Ref: UserApi
  AddBookmarkUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-User-AddBookmarkUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: bookmarkFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: user/bookmark
            Method: post
            RestApiId:
              Ref: UserApi

  RemoveBookmarkUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-User-RemoveBookmarkUser"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: removeBookmarkFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: user/removeBookmark
            Method: post
            RestApiId:
              Ref: UserApi
  # Set Output Variable

Outputs:
  ApiEndpoint:
    Description: "User API endpoint."
    Value: !Sub "https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/user"